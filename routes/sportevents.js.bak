var mongo = require('mongodb');

var Server = mongo.Server,
Db = mongo.Db,
BSON = mongo.BSONPure;

var server = new Server('127.0.0.1', 27017, {auto_reconnect: true});
db = new Db('sporteventsdb', server, {safe: true});

db.open(function(err, db) {
	console.log("Opening Connection");


	if(!err) {
		console.log("Connected to 'sporteventsdb' database");
	db.collection('sportevents', {safe:true}, function(err, collection) {
		if (err) {
			console.log("The 'sportevents' collection doesn't exist. Creating it with sample data...");
			populateDB();
		}
	});
}
});

exports.findById = function(req, res) {
	var id = req.params.id;
	console.log('Retrieving event: ' + id);
	db.collection('sportevents', function(err, collection) {
	collection.findOne({'_id':new BSON.ObjectID(id)}, function(err, item) {
		res.send(item);
	});
});
};

exports.findAllSportEvents = function(req, res) {
	var q = req.query["q"];
	var ll = req.query["ll"];
	var tokens = ll.split(",");
	var lat = 0, lon = 0;

	if (tokens.length == 2) {
		//todo, check if valid numbers & within appropriate bounds
		console.log("todo, check if valid numbers & within appropriate bounds");
		lat = parseFloat(tokens[0]);
		lon = parseFloat(tokens[1]);
	}
	else {
		//would be better to throw an error, but sending empty response for now
		console.log("would be better to throw an error, but sending empty response for now");
		return;
	}

	db.collection('sportevents', function(err, collection) {
		collection.find().toArray(function(err, items) {
			var output = { points : items,
				polygons:[[[32.658844,-117.095734],[32.664352,-117.110397],[32.665211,-117.110733],[32.668373,-117.109688],[32.672939,-117.106956],[32.682457,-117.100403],[32.680431,-117.090553],[32.675617,-117.080437],[32.6740959,-117.0789602],[32.672218,-117.078873],[32.660557,-117.08622],[32.6571542,-117.0905529],[32.658844,-117.095734]]]
			}
			res.send(output);
		});
	});
};


exports.findPolygonArea = function(req, res) {
	console.log('findPolygonArea');
	db.collection('polygons', function(err, collection) {
		collection.find().toArray(function(err, items) {
			res.send(items);
		});
	});
};


exports.addSportEvent = function(req, res) {
	var sportevent = req.body;
	console.log('Adding event: ' + JSON.stringify(sportevent));
	db.collection('sportevents', function(err, collection) {
	collection.insert(sportevent, {safe:true}, function(err, result) {
		if (err) {
			res.send({'error':'An error has occurred'});
		} else {
			console.log('Success: ' + JSON.stringify(result[0]));
			res.send(result[0]);
		}
	});
});
};

exports.updateSportEvent = function(req, res) {
	var id = req.params.id;
	var sportEvent = req.body;
	console.log('Updating event: ' + id);
	console.log(JSON.stringify(sportEvent));
	db.collection('sportevents', function(err, collection) {
	collection.update({'_id':new BSON.ObjectID(id)}, sportevent, {safe:true}, function(err, result) {
		if (err) {
			console.log('Error updating event: ' + err);
			res.send({'error':'An error has occurred'});
		} else {
			console.log('' + result + ' document(s) updated');
			res.send(sportEvent);
		}
	});
});
};

exports.deleteSportEvent = function(req, res) {
	var id = req.params.id;
	console.log('Deleting event: ' + id);
	db.collection('sportevents', function(err, collection) {
	collection.remove({'_id':new BSON.ObjectID(id)}, {safe:true}, function(err, result) {
		if (err) {
			res.send({'error':'An error has occurred - ' + err});
		} else {
			console.log('' + result + ' document(s) deleted');
			res.send(req.body);
		}
	});
});
};

/*--------------------------------------------------------------------------------------------------------------------*/
// Populate database with sample data -- Only used once: the first time the application is started.
// You'd typically not find this code in a real-life app, since the database would already exist.
exports.populateSportEvents = function(req, res) {

	var sportevents = [
	{
		"accessible_wheelchair":true,
		"address":"925 E Plaza Blvd",
		"alcohol": true,
		"alcohol_beer_wine":true,
		"attire":"casual",
		"category":"Food & Beverage > Restaurants > Sushi",
		"country":"US",
		"cuisine":"Japanese, Sushi",
		"factual_id":"317ced43-30c4-4e70-a3bd-3a5db4e45d88",
		"groups_goodfor":true,
		"kids_goodfor":true,
		"latitude":41.1392,
		"locality":"National City",
		"longitude":29.1947,
		"meal_deliver":false,
		"meal_dinner":true,
		"meal_lunch":true,
		"meal_takeout":true,
		"name":"Besiktas - Buca",
		"parking":true,
		"parking_lot":true,
		"payment_cashonly":false,
		"postcode":"91950",
		"price":2,
		"rating":3.5,
		"region":"CA",
		"reservations":true,
		"seating_outdoor": false,
		"status":"1",
		"tel":"(619) 474-2918",
		"distance":862.674,
		"travel_time_seconds":995,
		"travel_time_formatted":"12 mins",
		"distance":"0.64"
	},

	{
		"accessible_wheelchair":true,
		"address":"925 E Plaza Blvd",
		"alcohol": true,
		"alcohol_beer_wine":true,
		"attire":"casual",
		"category":"Food & Beverage > Restaurants > Sushi",
		"country":"US",
		"cuisine":"Japanese, Sushi",
		"factual_id":"317ced43-30c4-4e70-a3bd-3a5db4e45d88",
		"groups_goodfor":true,
		"kids_goodfor":true,
		"latitude":41.048183,
		"locality":"National City",
		"longitude":28.953574,
		"meal_deliver":false,
		"meal_dinner":true,
		"meal_lunch":true,
		"meal_takeout":true,
		"name":"Karsiyaka - Kasimpasa",
		"parking":true,
		"parking_lot":true,
		"payment_cashonly":false,
		"postcode":"91950",
		"price":2,
		"rating":3.5,
		"region":"CA",
		"reservations":true,
		"seating_outdoor": false,
		"status":"1",
		"tel":"(619) 474-2918",
		"distance":862.674,
		"travel_time_seconds":995,
		"travel_time_formatted":"17 mins",
		"distance":"0.54"
	}
	];

	var polygons = [[[32.658844,-117.095734],[32.664352,-117.110397],[32.665211,-117.110733],[32.668373,-117.109688],[32.672939,-117.106956],[32.682457,-117.100403],[32.680431,-117.090553],[32.675617,-117.080437],[32.6740959,-117.0789602],[32.672218,-117.078873],[32.660557,-117.08622],[32.6571542,-117.0905529],[32.658844,-117.095734]]];



	db.collection('sportevents', function(err, collection) {
		console.log('Before insertion');
	collection.insert(sportevents, {safe:true}, function(err, result) {

		if(err){
			console.log(err);
		}


	});
	console.log('After insertion');
});



db.collection('polygons', function(err, collection) {
	console.log('Before insertion');
  collection.insert(polygons, {safe:true}, function(err, result) {
	if(err){
		console.log(err);
	}


});
console.log('After insertion');
});

};